{"version":3,"sources":["assets/oops.png","components/Cards.js","components/CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","users","CustomizedLabel","x","y","dx","dy","textAnchor","width","transform","map","user","key","id","avatar","Fragment","className","src","alt","onError","event","target","setAttribute","fallback","name","occupation","data-name","charAt","height","data","margin","top","right","left","bottom","strokeDasharray","tick","fontSize","dataKey","value","offset","position","label","type","stroke","totalImpress","totalConvert","Math","round","revenue","CardContainer","logs","useState","nameSort","setNameSort","revenueSort","setRevenueSort","impressSort","setImpressSort","convertSort","setConvertSort","init","setInit","total","acc","curr","forEach","log","user_id","time","impressions","conversions","push","Date","obj","sort","a","b","date","formattedDate","getMonth","getDate","length","reduce","dates","datapoints","temp","combineData","onClick","localeCompare","reverse","App","setUsers","setLogs","httpData","async","url","fetch","method","mode","cache","credentials","headers","redirect","referrer","response","json","useEffect","fetchUsers","fetchLogs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,mOC+F5BC,MAjFf,YAA2B,IAAVC,EAAS,EAATA,MACTC,EAAkB,WACtB,OACE,kBAAC,IAAD,CACEC,EAAG,EACHC,EAAG,EACHC,IAAK,GACLC,GAAI,GACJC,WAAW,SACXC,MAAO,IACPC,UAAU,eAPZ,gBAaJ,OAAOR,EAAMS,KAAI,SAAAC,GACf,OACE,yBAAKC,IAAKD,EAAKE,IACZF,EAAKG,QACJ,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,cACb,6BACE,yBACEC,IAAKN,EAAKG,OACVI,IAAI,OACJC,QAAS,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,aAAa,MAAOC,SAGvD,yBAAKP,UAAU,QACb,wBAAIA,UAAU,QAAQL,EAAKa,MAC3B,uBAAGR,UAAU,QAAQL,EAAKc,gBAKhCd,EAAKG,QACL,yBAAKE,UAAU,cACb,yBAAKU,YAAWf,EAAKa,KAAKG,OAAO,KACjC,yBAAKX,UAAU,QACb,wBAAIA,UAAU,QAAQL,EAAKa,MAC3B,uBAAGR,UAAU,QAAQL,EAAKc,cAIhC,yBAAKT,UAAU,gBACb,6BACE,0BAAMA,UAAU,SAAhB,uBACA,kBAAC,IAAD,CAAqBR,MAAM,OAAOoB,OAAQ,KACxC,kBAAC,IAAD,CACEC,KAAMlB,EAAKkB,KACXC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,KAAM,CAAEC,SAAU,IAAMC,QAAQ,QACrC,kBAAC,IAAD,CAAOC,MAAM,QAAQC,QAAS,EAAGC,SAAS,kBAE5C,kBAAC,IAAD,CAAOL,KAAM,CAAEC,SAAU,IAAMK,MAAO,kBAACxC,EAAD,QACtC,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMyC,KAAK,WAAWL,QAAQ,cAAcM,OAAO,eAIzD,yBAAK5B,UAAU,WACb,0BAAMA,UAAU,WAAWL,EAAKkC,cAChC,0BAAM7B,UAAU,SAAhB,eACA,0BAAMA,UAAU,WAAWL,EAAKmC,cAChC,0BAAM9B,UAAU,SAAhB,eACA,uBAAGA,UAAU,SAAb,IAA2B+B,KAAKC,MAAMrC,EAAKsC,iBC0BxCC,MA9Gf,YAAyC,IAAhBjD,EAAe,EAAfA,MAAOkD,EAAQ,EAARA,KAAQ,EACNC,oBAAS,GADH,mBAC/BC,EAD+B,KACrBC,EADqB,OAEAF,oBAAS,GAFT,mBAE/BG,EAF+B,KAElBC,EAFkB,OAGAJ,oBAAS,GAHT,mBAG/BK,EAH+B,KAGlBC,EAHkB,OAIAN,oBAAS,GAJT,mBAI/BO,EAJ+B,KAIlBC,EAJkB,OAKdR,oBAAS,GALK,mBAK/BS,EAL+B,KAKzBC,EALyB,KAsFtC,OAhFoB,WAClB,IAAKD,EAAM,CACT,IAAMnD,EAAM,GACNqD,EAAQ,SAACC,EAAKC,GAAN,OAAeD,EAAMC,GACnCd,EAAKe,SAAQ,SAAAC,GACNzD,EAAIyD,EAAIC,WACX1D,EAAIyD,EAAIC,SAAW,CACjBC,KAAM,GACN1B,KAAM,GACNM,QAAS,GACTqB,YAAa,GACbC,YAAa,KAGA,eAAbJ,EAAIxB,KACNjC,EAAIyD,EAAIC,SAASE,YAAYE,KAAKL,EAAIE,MAEtC3D,EAAIyD,EAAIC,SAASG,YAAYC,KAAK,IAAIC,KAAKN,EAAIE,OAEjD3D,EAAIyD,EAAIC,SAASC,KAAKG,KAAKL,EAAIE,MAC/B3D,EAAIyD,EAAIC,SAASzB,KAAK6B,KAAKL,EAAIxB,MAC/BjC,EAAIyD,EAAIC,SAASnB,QAAQuB,KAAKL,EAAIlB,YAGpChD,EAAMS,KAAI,SAAAC,GACR,IAAM+D,EAAM,GACZhE,EAAIC,EAAKE,IAAI0D,YAAYI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC5CnE,EAAIC,EAAKE,IAAI0D,YAAYL,SAAQ,SAAAY,GAC/B,IAAMC,EAAgBD,EAAKE,WAAa,EAAI,IAAMF,EAAKG,UAClDP,EAAIK,KACPL,EAAIK,GAAiB,IAEvBL,EAAIK,GAAeP,KAAKM,MAE1BnE,EAAKkC,aAAenC,EAAIC,EAAKE,IAAIyD,YAAYY,OAC7CvE,EAAKmC,aAAepC,EAAIC,EAAKE,IAAI0D,YAAYW,OAC7CvE,EAAKsC,QAAUvC,EAAIC,EAAKE,IAAIoC,QAAQkC,OAAOpB,GAC3CpD,EAAKyE,MAAQV,EACb,IAAMW,EAAa,GACnB,IAAK,IAAIzE,KAAO8D,EAAK,CACnB,IAAIY,EAAO,CAAE9D,KAAMZ,EAAK2D,YAAaG,EAAI9D,GAAKsE,QAC9CG,EAAWb,KAAKc,GAGlB,OADA3E,EAAKkB,KAAOwD,EACL1E,KAETmD,GAAQ,IAGZyB,GAgCE,6BACE,iDACA,yBAAKvE,UAAU,mBACb,4BAAQA,UAAU,aAAawE,QAjClB,WACjBvF,EAAM0E,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpD,KAAKiE,cAAcZ,EAAErD,SACvC6B,GACHpD,EAAMyF,UAERpC,GAAaD,KA4BT,WACWA,EAAW,MAAQ,QAE9B,4BAAQrC,UAAU,aAAawE,QAfnB,WAChBvF,EAAM0E,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,aAAegC,EAAEhC,gBACnCY,GACHxD,EAAMyF,UAERhC,GAAgBD,KAUZ,kBACkBA,EAAc,MAAQ,QAExC,4BAAQzC,UAAU,aAAawE,QAzBf,WACpBvF,EAAM0E,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE9B,aAAe+B,EAAE/B,gBACnCa,GACH1D,EAAMyF,UAER9B,GAAgBD,KAoBZ,kBACkBA,EAAc,MAAQ,QAExC,4BAAQ3C,UAAU,aAAawE,QAnCf,WACpBvF,EAAM0E,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3B,QAAU4B,EAAE5B,WAC9BM,GACHtD,EAAMyF,UAERlC,GAAgBD,KA8BZ,cACcA,EAAc,MAAQ,SAGtC,yBAAKvC,UAAU,QACb,kBAAC,EAAD,CAAOf,MAAOA,OC/DP0F,MAxCf,WAAgB,IAAD,EACavC,mBAAS,IADtB,mBACNnD,EADM,KACC2F,EADD,OAEWxC,mBAAS,IAFpB,mBAEND,EAFM,KAEA0C,EAFA,KAiBb,SAAeC,IAAf,6BAAAlB,EAAAmB,OAAA,uDAAwBC,EAAxB,+BAA8B,GAA9B,WAAApB,EAAA,MACyBqB,MAAMD,EAAK,CAChCE,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAElBC,SAAU,SACVC,SAAU,iBAVd,cACQC,EADR,kBAAA7B,EAAA,MAae6B,EAASC,QAbxB,6EAgBA,OA9BAC,qBAAU,YACW,mBAAA/B,EAAAmB,OAAA,kEAAAnB,EAAA,MACMkB,EAAS,eADf,OACXW,EADW,OAEjBb,EAASa,GAFQ,qCASnBG,GALkB,mBAAAhC,EAAAmB,OAAA,kEAAAnB,EAAA,MACOkB,EAAS,cADhB,OACVW,EADU,OAEhBZ,EAAQY,GAFQ,qCAMlBI,KACC,IAmBD,yBAAK7F,UAAU,OACZmC,EAAK+B,OAAS,GAAK,kBAAC,EAAD,CAAejF,MAAOA,EAAOkD,KAAMA,MC3BzC2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2d9052d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oops.b0ef4f6a.png\";","import React from \"react\";\r\nimport fallback from \"../assets/oops.png\";\r\nimport {\r\n  Label,\r\n  Text,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nfunction Cards({ users }) {\r\n  const CustomizedLabel = () => {\r\n    return (\r\n      <Text\r\n        x={0}\r\n        y={0}\r\n        dx={-90}\r\n        dy={40}\r\n        textAnchor=\"middle\"\r\n        width={180}\r\n        transform=\"rotate(-90)\"\r\n      >\r\n        Conversions\r\n      </Text>\r\n    );\r\n  };\r\n  return users.map(user => {\r\n    return (\r\n      <div key={user.id}>\r\n        {user.avatar && (\r\n          <React.Fragment>\r\n            <div className=\"basic-info\">\r\n              <div>\r\n                <img\r\n                  src={user.avatar}\r\n                  alt=\"icon\"\r\n                  onError={event => event.target.setAttribute(\"src\", fallback)}\r\n                ></img>\r\n              </div>\r\n              <div className=\"desc\">\r\n                <h2 className=\"name\">{user.name}</h2>\r\n                <p className=\"occu\">{user.occupation}</p>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n        {!user.avatar && (\r\n          <div className=\"basic-info\">\r\n            <div data-name={user.name.charAt(0)}></div>\r\n            <div className=\"desc\">\r\n              <h2 className=\"name\">{user.name}</h2>\r\n              <p className=\"occu\">{user.occupation}</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"infographics\">\r\n          <div>\r\n            <span className=\"chart\">Conversions Per Day</span>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n              <LineChart\r\n                data={user.data}\r\n                margin={{\r\n                  top: 5,\r\n                  right: 10,\r\n                  left: 0,\r\n                  bottom: 5\r\n                }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"0 0\" />\r\n                <XAxis tick={{ fontSize: 10 }} dataKey=\"name\">\r\n                  <Label value=\"Dates\" offset={-5} position=\"insideBottom\" />\r\n                </XAxis>\r\n                <YAxis tick={{ fontSize: 10 }} label={<CustomizedLabel />} />\r\n                <Tooltip />\r\n                <Line type=\"monotone\" dataKey=\"conversions\" stroke=\"#82ca9d\" />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n          <div className=\"summary\">\r\n            <span className=\"impress\">{user.totalImpress}</span>\r\n            <span className=\"types\">impressions</span>\r\n            <span className=\"convert\">{user.totalConvert}</span>\r\n            <span className=\"types\">conversions</span>\r\n            <p className=\"money\">&#36;{Math.round(user.revenue)}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nexport default Cards;\r\n","import React, { useState } from \"react\";\r\nimport Cards from \"./Cards\";\r\n\r\nfunction CardContainer({ users, logs }) {\r\n  const [nameSort, setNameSort] = useState(true);\r\n  const [revenueSort, setRevenueSort] = useState(true);\r\n  const [impressSort, setImpressSort] = useState(true);\r\n  const [convertSort, setConvertSort] = useState(true);\r\n  const [init, setInit] = useState(false);\r\n  const combineData = () => {\r\n    if (!init) {\r\n      const map = {};\r\n      const total = (acc, curr) => acc + curr;\r\n      logs.forEach(log => {\r\n        if (!map[log.user_id]) {\r\n          map[log.user_id] = {\r\n            time: [],\r\n            type: [],\r\n            revenue: [],\r\n            impressions: [],\r\n            conversions: []\r\n          };\r\n        }\r\n        if (log.type === \"impression\") {\r\n          map[log.user_id].impressions.push(log.time);\r\n        } else {\r\n          map[log.user_id].conversions.push(new Date(log.time));\r\n        }\r\n        map[log.user_id].time.push(log.time);\r\n        map[log.user_id].type.push(log.type);\r\n        map[log.user_id].revenue.push(log.revenue);\r\n      });\r\n\r\n      users.map(user => {\r\n        const obj = {};\r\n        map[user.id].conversions.sort((a, b) => a - b);\r\n        map[user.id].conversions.forEach(date => {\r\n          const formattedDate = date.getMonth() + 1 + \"/\" + date.getDate();\r\n          if (!obj[formattedDate]) {\r\n            obj[formattedDate] = [];\r\n          }\r\n          obj[formattedDate].push(date);\r\n        });\r\n        user.totalImpress = map[user.id].impressions.length;\r\n        user.totalConvert = map[user.id].conversions.length;\r\n        user.revenue = map[user.id].revenue.reduce(total);\r\n        user.dates = obj;\r\n        const datapoints = [];\r\n        for (let key in obj) {\r\n          let temp = { name: key, conversions: obj[key].length };\r\n          datapoints.push(temp);\r\n        }\r\n        user.data = datapoints;\r\n        return user;\r\n      });\r\n      setInit(true);\r\n    }\r\n  };\r\n  combineData();\r\n\r\n  const sortByName = () => {\r\n    users.sort((a, b) => a.name.localeCompare(b.name));\r\n    if (!nameSort) {\r\n      users.reverse();\r\n    }\r\n    setNameSort(!nameSort);\r\n  };\r\n  const sortByRevenue = () => {\r\n    users.sort((a, b) => a.revenue - b.revenue);\r\n    if (!revenueSort) {\r\n      users.reverse();\r\n    }\r\n    setRevenueSort(!revenueSort);\r\n  };\r\n  const sortByConvert = () => {\r\n    users.sort((a, b) => a.totalConvert - b.totalConvert);\r\n    if (!convertSort) {\r\n      users.reverse();\r\n    }\r\n    setConvertSort(!convertSort);\r\n  };\r\n  const sortByImp = () => {\r\n    users.sort((a, b) => a.totalImpress - b.totalImpress);\r\n    if (!impressSort) {\r\n      users.reverse();\r\n    }\r\n    setImpressSort(!impressSort);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Marketing Summary</h1>\r\n      <div className=\"buttonContainer\">\r\n        <button className=\"sortButton\" onClick={sortByName}>\r\n          By name {nameSort ? \"asc\" : \"desc\"}\r\n        </button>\r\n        <button className=\"sortButton\" onClick={sortByImp}>\r\n          By impressions {impressSort ? \"asc\" : \"desc\"}\r\n        </button>\r\n        <button className=\"sortButton\" onClick={sortByConvert}>\r\n          By conversions {convertSort ? \"asc\" : \"desc\"}\r\n        </button>\r\n        <button className=\"sortButton\" onClick={sortByRevenue}>\r\n          By revenue {revenueSort ? \"asc\" : \"desc\"}\r\n        </button>\r\n      </div>\r\n      <div className=\"grid\">\r\n        <Cards users={users} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardContainer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CardContainer from \"./components/CardContainer\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [logs, setLogs] = useState([]);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await httpData(\"/api/users\");\n      setUsers(response);\n    };\n    const fetchLogs = async () => {\n      const response = await httpData(\"/api/logs\");\n      setLogs(response);\n    };\n\n    fetchUsers();\n    fetchLogs();\n  }, []);\n\n  async function httpData(url = \"\") {\n    const response = await fetch(url, {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrer: \"no-referrer\"\n    });\n\n    return await response.json();\n  }\n\n  return (\n    <div className=\"App\">\n      {logs.length > 0 && <CardContainer users={users} logs={logs} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}